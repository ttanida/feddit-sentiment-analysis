name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff src tests

      - name: Type checking with mypy
        run: |
          mypy src --ignore-missing-imports --no-strict-optional

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.10'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Security check with safety
        run: |
          pip install safety
          safety check

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t sentiment-analysis-api:latest .

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8000:8000 --name test-api sentiment-analysis-api:latest
          sleep 10
          curl -f http://localhost:8000/api/v1/health || exit 1
          docker stop test-api

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    services:
      feddit:
        image: chasingcars/feddit:latest
        env:
          SQLALCHEMY_DATABASE_URI: "sqlite:///test.db"
        ports:
          - 8080:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/api/v1/version || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Feddit API
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8080/api/v1/version; do sleep 5; done'

      - name: Run integration tests
        env:
          FEDDIT_BASE_URL: "http://localhost:8080"
        run: |
          pytest tests/test_api.py::TestAPI::test_analyze_sentiment_success -v
